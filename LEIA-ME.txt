Sistema de Gerenciamento Aeroporto OnTheFly




Classe Passageiro:

CPF - Deverá seguir todas as definições do Governo federal,  tais como quantidade de dígitos e validação.

Nome - O nome do cliente deverá ser do tipo texto e obrigatoriamente armazanar dados de 50 dígitos.

Sexo - 1 Caractere (M / F / N)

Situação  - 1 Caractere (A – Ativo ou I – Inativo)

Datas:

DataNascimento - Aceita cadastrar passageiro de qualquer idade.

Ultima compra - Deverá  armazenar  a  data  em  que  o  cliente  executou sua última compra.
No momento do cadastro, poderá ser a data atual.

DataCadastro - Data atual do sistema no momento do cadastro.





Classe CompanhiaAerea:

Cnpj - Deverá seguir todas as definições do Governo federal,  tais como quantidade de dígitos e validação.

RazaoSocial - O nome/Razão social deverá ser do tipo texto e obrigatoriamente armazanar dados de 50 dígitos.
(Isso  será  uma necessidade, devido à expansão do projeto que irá controlar as notas fiscais eletrônicas)

Situação - 1 Caractere (A – Ativo ou I – Inativo)

Datas:

DataAbertura - Data de abertura da companhia aérea (Obs.: Não pode ser cadastrado empresas
com menos de 06 meses de existência)

UltimoVoo - Deverá  armazenar  a  data  em  que  a  empresa executou seu último voo no aeroporto.
No momento do cadastro, poderá ser a data atual.

DataCadastro – Data atual do sistema no momento do cadastro.





Classe Aeronave:

Inscricao - Código de identificação da Aeronave. Deverá seguir o padrão definido pela ANAC.


Capacidade - É a quantidade de passageiros que a aeronave comporta. 

AssentosOcupados - Quantidade de assentos já vendidos.

Situação - 1 Caractere (A – Ativo ou I – Inativo)

Datas:

UltimaVenda - (Deverá armazenar a data da última venda depassagem).
No momento do cadastro, poderá ser a data atual.

DataCadastro – Data atual do sistema no momento do cadastro.





Classe Voo:

IdVoo - Deverá ser um código que irá identificar o Voo cadastrado.
V0000 - Digito inicial V, seguidos de 4 dígitos numéricos.

Destino - O Aeroporto de Destino do voo cadastrado.

Aeronave - Id da Aeronave Cadastrada.

Situação - 1 Caractere (A – Ativo ou C – Cancelado)

Datas:

DataVoo - Data e Hora – Deverá ser a data/hora de partida do
voo. DATA 8 Dígitos + 4 Dígitos da Hora

DataCadastro – Data atual do sistema no momento do cadastro.





Classe PassagemVoo:

IdPassagem - Deverá ser um código que irá identificar a passagem cadastrada.
PA0000 – Dois dígitos PA, seguidos de 4 dígitos numéricos.

IdVoo - - Deverá ser um código que irá identificar o Voo.
V0000 - Digito inicial V, seguidos de 4 dígitos numéricos.

Valor - Tamanho e valor Máximo 9.999,99

Situação - 1 Caractere (L – Livre, R – Reservada ou P – Paga)

Data:

DataUltimaOperacao Data – Deverá ser a data atual do Sistema





Classe Venda:

IDVenda -  Código que irá identificar a venda.
Número sequencial que iniciará em 1 e, através deste sistema poderá ir apenas até a venda 99.999.

Passageiro - É o CPF do Passageiro que realizou a compra

ValorTotal - É o Valor Total da Venda finalizada.
Tamanho e valor Máximo 99.999,99

Datas:

DataVenda - Data da venda, no cadastro deve ser a data atual.





Classe ItemVenda:

IDItemVenda - É o código que identifica a venda que está sendo realizada.

IDPassagem - É o identificador da passagem que está sendo vendida.

ValorUnitario - Valor unitário da passagem vendida.







Funções criadas para o funcionamento do OnTheFly:



Atualiza() retorno void - Quando o programa é iniciado atualiza automaticamente as passagens reservadas e voos realizados.
As passagens reservadas 'R' vão para livres em 2 dias de reserva e os voos já realizados pela data vão para lista de voos realizados.


ValorConverter(float valor) retorno string - converte um valor float até 9.999,00 e retorna um string com obrigatóriamente 8 caracteres.
(exemplo: 30 reais converte para 0.030,00 ou 100 reais converte para 0.100,00)


DateConverter(string data) retorno DateTime - converte um valor de data de string do tipo "02021992" e retorna DateTime 02/02/1992 00:00
(usado para converter a data de string para DateTime, na hora de instanciar um objeto)


DateHourConverter(string data) retorno DateTime - converte um valor de data com hora de string do tipo "020219921220" e retorna DateTime 02/02/1992 12:20
(usado para converter a data e hora de string para DateTime, na hora de instanciar um objeto)


GeradorIdPassagens(int capacidadeacentos) retorno List<string> - Gera os id's da quantidade de passagens recebida por parâmetro. 
Retorna uma lista<string> onde cada posição dessa lista é uma id de uma passagem no tipo string "PA0000"




GeradorId(String id) retorno string - gera id para voo, venda e item venda.

parâmetros:

("idvoo") - Gera e retorna um idVoo único.

("idvenda") - Gera e retorna um idVenda único.
10000 até 99999 Retorna obrigatóriamente 5 caracteres.

("iditemvenda") - Gera e retorna um idItemVenda único.
10000 até 99999 Retorna obrigatóriamente 5 caracteres.




ValidarEntrada(String entrada);

- recebe uma string como parâmetros (listados logo a baixo)
- realiza um tratamento do um valor de entrada escolhido
- retorna o valor de entrada como string que pode ser convertido posteriormente
- Ou retorna nullo se o usuário cancelar a entrada dos dados
- Quando retornar NULL significa somente que é pra cancelar, voltar para o menu

parâmetros:

("menu") - retorna um STRING alfanumerio (qualquer numero digitado - Tratamento é feito no switch case do menu)

("cpf") - valida, procura se já existe cadastro. Se NÃO existir retorna 11 alfanumericos (para cadastro)

("cnpj") - valida, procura se já existe cadastro e se NÃO EXISTIR retorna 14 alfanumericos

("cnpjexiste") - Procura se já existe cadastro, e se EXISTIR retorna 14 alfanumericos (para tela de edição de dados da companhia aerea)

("nome") - valida e retorna um nome/razaosocial obrigatoriamente com 50 caracteres (se preciso, preenchido com espaço)

("sexo") - valida e retorna STRING maiúscula M / F / N
	
("datanascimento") - valida o nascimento e retorna um STRING de data com 8 caracteres

("dataabertura") - valida a data (Se for menos de 6 meses retorna NULL NA HORA!) se for válido retorna um STRING de data

("datavoo") - Valida e retorna um STRING de data com 12 caracteres, considera a hora

("idaeronave") - Informe o código Nacional de identificação da Aeronave: ... le o id da aeronave e verifica se é valido, depois se existe no arquivo. Se NÃO existir retorna o idaeronave. (Cadastro aeronave)

("capacidade") - valida quantidade de acentos e retorna STRING alfanumérico de 3 digitos

("situacao") - lê 1 ou 2 obrigatoriamente e retorna STRING maiúscula A ou I

("destino") - le o destino e verifica se existe no arquivo. Retorna o destino como string

("aeronave") - le o id da aeronave, verifica se a situação está ativa e verifica se existe no arquivo. Se existir retorna o idaeronave. (Cadastro voo)

("aeronaveeditar") - le o id da aeronave, verifica se existe no arquivo. Se existir retorna o idaeronave. (Editar situação da aeronave)

("valorpassagem") - valida e retorna o valor da passagem como string("N2") - Não controla quantidade de casas. Para gravar usar o ValorConverter(float valor).

("idvenda") - verifica na lista de vendas se existe e retorna o valor

("cpflogin") - verifica se já existe cadastro, verifica se está ativo, verifica se é maior de 18, verificar se tem na lista restritos, retornar cpf (Para TelaOpcoesPassageiro).

("cpfexiste") - Se existir cpf na lista de passageiros, retorna o cpf, senão existir retorna null. (Para TelaLoginPassageiro).

("idvoo") - Verifica se existe na lista de voos um voo com esse id. Se existir retorna o idvoo (Para Tela de compras).








Gerenciamento da base de dados:

O programa salva todos os dados em arquivos.dat e carrega todos sempre que iniciado, alimentando as informações das listas;
Os dados dos atributos de cada objeto são gravados todos em uma linha do seu respectivo arquivo.dat;

static void CarregarArquivos(){}
-Carrega todos os arquivos.dat e alimenta todas as listas.
-Excessão é mostrada se não for possível carregar os dados.

Passageiro.dat(CPF 11digitos Nome 50digitos datanasc 8digitos sexo 1digito DataUltimaCompra 12digitos DataCadastro 12digitos Situação 1digito)
Lista dos Passageiros: List<Passageiro> listPassageiro
static void GravarPassageiro(){}

CompanhiaAerea.dat(CNPJ 14 RazãoSocial 50 DataAbertura 8 UltimoVoo 12 DataCadastro 12 Situação 1)
Lista das Companhias Aéreas: List<CompanhiaAerea> listCompanhia
static void GravarCompanhiaAerea(){}

Aeronaves.dat(Inscrição 6 Capacidade 3 Assentos ocupados 3 Ultima Venda 12 Data Cadastro 12 Situação 1)
Lista de Aeronaves: List<Aeronaves> listAeronaves
static void GravarAeronaves(){}

Voo.dat(ID Voo 5 DestinoIATA 3 AeronaveInscrição 6 DataVoo 12 DataCadastro 12 Situação 1)
Lista dos Voos: List<Voo> listVoo
static void GravarVoo(){}

PassagemVoo.dat(IDPassagem 6 IDVoo 5 DataUltimaOperação 12 Valor 7 Situação 1)
Lista das Passagens: List<Passagem> listPassagem
static void GravarPassagem(){}

Venda.dat(IDVenda 5 DataVenda 12 Passageiro 11 CPF ValorTotal 8)
Lista das Vendas: List<Venda> listVenda
static void GravarVenda(){}

ItemVenda.dat(IDItemVenda 5 IDPassagem 6 ValorUnitario 7)
Lista de Itens da Venda: List<ItemVenda> listItemVenda
static void GravarItemVenda(){}

Restritos.dat(Armazena os CPF's dos passageiros proibidos de voar/Restritos)
Lista de Restritos: List<string> listRestritos
static void GravarRestritos(){}

Bloqueados.dat(Armazena os CNPJ's de companhias Aéreas que não possuem mais permissão para cadastrar voos)
Lista de Bloqueados: List<string> listBloqueados
static void GravarBloqueados(){}

Destino.dat(Armazena o código IATA de todos os Aeroportos de destino)
Lista dos Destinos: List<string> listDestino

VooRealizado.dat(Armazena os voos já realizados pela data automaticamente ao iniciar o programa)
Lista dos Voos Realizados: List<string> voosrealizados
static void GravarVooRealizado(){}
